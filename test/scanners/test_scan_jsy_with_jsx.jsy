const { assert } = require('chai')
import { jsy_transpile } from '@jsy-lang/jsy/esm/all.js'
import { scan_jsy_lines, test_ast_tokens_content, ast_tokens_content, jsy_scan_throws } from './_ast_test_utils.jsy'


describe @ 'JSY Scanner (with JSX expressions)', @=> ::
  describe @ 'JSX basic', @=> ::
    it @ 'basic body', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section>example</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section>"'
            'jsx_content "example"'
            'jsx_tag_close "</section>"'
            'offside_dedent'


    it @ 'basic body with attr only', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section hidden>example</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_attr_name_only "hidden"'
            'jsx_tag_part ">"'
            'jsx_content "example"'
            'jsx_tag_close "</section>"'
            'offside_dedent'


    it @ 'basic body with attr', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section class="nice">example</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_attr_name "class="'
            'jsx_attr_str2 "\\"nice\\""'
            'jsx_tag_part ">"'
            'jsx_content "example"'
            'jsx_tag_close "</section>"'
            'offside_dedent'


    it @ 'basic body with attr param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section {param}>example</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_tag_part ">"'
            'jsx_content "example"'
            'jsx_tag_close "</section>"'
            'offside_dedent'


    it @ 'basic body with jsy_op in param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section {caller @ param}>example</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_param "{"'
            'src "caller"'
            'jsy_op " @"'
            'src " param"'
            'jsx_param_end "}"'
            'jsx_tag_part ">"'
            'jsx_content "example"'
            'jsx_tag_close "</section>"'
            'offside_dedent'



  describe @ 'JSX Fragment', @=> ::
    it @ 'basic body', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<>example</>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_frag "<>"'
            'jsx_content "example"'
            'jsx_frag_close "</>"'
            'offside_dedent'


    it @ 'basic body with attr', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<><div /><span>example</span></>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_frag "<>"'
            'jsx_tag "<div />"'
            'jsx_tag "<span>"'
            'jsx_content "example"'
            'jsx_tag_close "</span>"'
            'jsx_frag_close "</>"'
            'offside_dedent'




  describe @ 'JSX self closing', @=> ::
    it @ 'self closing', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section />'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section />"'
            'offside_dedent'


    it @ 'self closing with attr (1)', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section class=\'nice\' />'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_attr_name "class="'
            "jsx_attr_str1 \"'nice' \""
            'jsx_tag_part "/>"'
            'offside_dedent'

    it @ 'self closing with two attrs (1)', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section class=\'nice\' style=\'color: "red"\' />'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_attr_name "class="'
            'jsx_attr_str1 "\'nice\' "'
            'jsx_attr_name "style="'
            'jsx_attr_str1 "\'color: \\"red\\"\' "'
            'jsx_tag_part "/>"'
            'offside_dedent'



    it @ 'self closing with attr (2)', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section class="nice" />'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_attr_name "class="'
            'jsx_attr_str2 "\\"nice\\" "'
            'jsx_tag_part "/>"'
            'offside_dedent'

    it @ 'self closing with two attrs (2)', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section class="nice" style="color: \'red\'" />'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_attr_name "class="'
            'jsx_attr_str2 "\\"nice\\" "'
            'jsx_attr_name "style="'
            'jsx_attr_str2 "\\"color: \'red\'\\" "'
            'jsx_tag_part "/>"'
            'offside_dedent'

    it @ 'self closing with param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section {param} />'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section "'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_tag_part " />"'
            'offside_dedent'



  describe @ 'JSX nested', @=> ::
    it @ 'body', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<outer>'
        '  <first>aaaa</first>'
        '  <second>bbbb</second>'
        '  <third />'
        '</outer>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<outer>"'
             'offside_dedent'

        @[] 'jsx_tag "<first>"'
            'jsx_content "aaaa"'
            'jsx_tag_close "</first>"'
            'offside_dedent'

        @[] 'jsx_tag "<second>"'
            'jsx_content "bbbb"'
            'jsx_tag_close "</second>"'
            'offside_dedent'

        @[] 'jsx_tag "<third />"'
             'offside_dedent'

        @[] 'jsx_tag_close "</outer>"'
            'offside_dedent'


    it @ 'body with mixed attrs', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<outer>'
        '  <first class="nice">aaaa</first>'
        '  <second class=\'some\' {extra}/>'
        '  <third class={param}>cccc</third>'
        '</outer>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<outer>"'
            'offside_dedent'

        @[] 'jsx_tag "<first "'
            'jsx_attr_name "class="'
            'jsx_attr_str2 "\\"nice\\""'
            'jsx_tag_part ">"'
            'jsx_content "aaaa"'
            'jsx_tag_close "</first>"'
            'offside_dedent'

        @[] 'jsx_tag "<second "'
            'jsx_attr_name "class="'
            'jsx_attr_str1 "\'some\' "'
            'jsx_param "{"'
            'src "extra"'
            'jsx_param_end "}"'
            'jsx_tag_part "/>"'
            'offside_dedent'

        @[] 'jsx_tag "<third "'
            'jsx_attr_name "class="'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_tag_part ">"'
            'jsx_content "cccc"'
            'jsx_tag_close "</third>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</outer>"'
            'offside_dedent'


    it @ 'fragment body with mixed attrs', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<>'
        '  <first class="nice">aaaa</first>'
        '  <second class=\'some\' {extra}/>'
        '  <third class={param}>cccc</third>'
        '</>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_frag "<>"'
            'offside_dedent'

        @[] 'jsx_tag "<first "'
            'jsx_attr_name "class="'
            'jsx_attr_str2 "\\"nice\\""'
            'jsx_tag_part ">"'
            'jsx_content "aaaa"'
            'jsx_tag_close "</first>"'
            'offside_dedent'

        @[] 'jsx_tag "<second "'
            'jsx_attr_name "class="'
            'jsx_attr_str1 "\'some\' "'
            'jsx_param "{"'
            'src "extra"'
            'jsx_param_end "}"'
            'jsx_tag_part "/>"'
            'offside_dedent'

        @[] 'jsx_tag "<third "'
            'jsx_attr_name "class="'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_tag_part ">"'
            'jsx_content "cccc"'
            'jsx_tag_close "</third>"'
            'offside_dedent'

        @[] 'jsx_frag_close "</>"'
            'offside_dedent'



  describe @ 'with content param', @=> ::

    it @ 'basic body with content param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section>before{param}after</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section>"'
            'jsx_content "before"'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_content "after"'
            'jsx_tag_close "</section>"'
            'offside_dedent'


    it @ 'basic body with jsy_op in content param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<section>before{caller @ param}after</section>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<section>"'
            'jsx_content "before"'
            'jsx_param "{"'
            'src "caller"'
            'jsy_op " @"'
            'src " param"'
            'jsx_param_end "}"'
            'jsx_content "after"'
            'jsx_tag_close "</section>"'
            'offside_dedent'

    it @ 'nested body with content param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<outer>'
        '  <first>'
        '    <second>{param}</second>'
        '  </first>'
        '</outer>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<outer>"'
            'offside_dedent'

        @[] 'jsx_tag "<first>"'
            'offside_dedent'

        @[] 'jsx_tag "<second>"'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_tag_close "</second>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</first>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</outer>"'
            'offside_dedent'


    it @ 'nested body with jsy_op in content param', @=> ::
      const offside_ast = scan_jsy_lines @#
        '<outer>'
        '  <first>'
        '    <second>{caller @ param}</second>'
        '  </first>'
        '</outer>'

      test_ast_tokens_content @ offside_ast,
        @[] 'jsx_tag "<outer>"'
            'offside_dedent'

        @[] 'jsx_tag "<first>"'
            'offside_dedent'

        @[] 'jsx_tag "<second>"'
            'jsx_param "{"'
            'src "caller"'
            'jsy_op " @"'
            'src " param"'
            'jsx_param_end "}"'
            'jsx_tag_close "</second>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</first>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</outer>"'
            'offside_dedent'



  describe @ 'Syntax Errors', @=> ::
    it @ 'crossing indent levels', @=> ::
      jsy_scan_throws @#
        'if cond_a ::'
        '  if cond_b ::'
        '    render @'
        '      <outer>'
        '       <first>'
        '        <second>content</second>'
        '     </first>'
        '  </outer>'
        ''

    it @ 'mismatched outer closing tags', @=> ::
      jsy_scan_throws @#
        'render @'
        '  <outer>'
        '    <first>'
        '      content'
        '    </first>'
        '  </wrong>'

    it @ 'mismatched inner closing tags', @=> ::
      jsy_scan_throws @#
        'render @'
        '  <outer>'
        '    <first>'
        '      content'
        '    </wrong>'
        '  </outer>'
        ''

    it @ 'mismatched inner closing tags within JSX fragment', @=> ::
      jsy_scan_throws @#
        'render @'
        '  <>'
        '    <first>'
        '      content'
        '    </wrong>'
        '  </>'
        ''

    it @ 'mismatched outer closing tags within JSX fragment', @=> ::
      jsy_scan_throws @#
        'render @'
        '  <>'
        '    <first>'
        '      content'
        '    </first>'
        '  </wrong>'
        ''


  describe @ 'Within Code', @=> ::
    it @ 'basic self-closing', @=> ::
      const offside_ast = scan_jsy_lines @#
        'first @ <br />'
        'second @ <hr />'

      test_ast_tokens_content @ offside_ast,
        @[] 'src "first"'
            'jsy_op " @"'
            'src " "'
            'jsx_tag "<br />"'
            'offside_dedent'

        @[] 'src "second"'
            'jsy_op " @"'
            'src " "'
            'jsx_tag "<hr />"'
            'offside_dedent'

    it @ 'basic open-close', @=> ::
      const offside_ast = scan_jsy_lines @#
        'first @ <h1>title</h1>'
        'second @ <h2>subtitle</h2>'

      test_ast_tokens_content @ offside_ast,
        @[] 'src "first"'
            'jsy_op " @"'
            'src " "'
            'jsx_tag "<h1>"',
            'jsx_content "title"',
            'jsx_tag_close "</h1>"',
            'offside_dedent'

        @[] 'src "second"'
            'jsy_op " @"'
            'src " "'
            'jsx_tag "<h2>"',
            'jsx_content "subtitle"',
            'jsx_tag_close "</h2>"',
            'offside_dedent'

    it @ 'nested open-close', @=> ::
      const offside_ast = scan_jsy_lines @#
        'first @'
        '  <h1>'
        '    title'
        '    <small>subtitle</small>'
        '  </h1>'
        ''
        'second @ arg'
        'third @ <p>content</p>'

      test_ast_tokens_content @ offside_ast,
        @[] 'src "first"'
            'jsy_op " @"'
            'offside_dedent'

        @[] 'jsx_tag "<h1>"'
            'offside_dedent'

        @[] 'jsx_content "title"'
            'offside_dedent'

        @[] 'jsx_tag "<small>"'
            'jsx_content "subtitle"'
            'jsx_tag_close "</small>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</h1>"'
            'offside_dedent'

        @[] 'src "second"'
            'jsy_op " @"'
            'src " arg"'
            'offside_dedent'

        @[] 'src "third"'
            'jsy_op " @"'
            'src " "'
            'jsx_tag "<p>"'
            'jsx_content "content"'
            'jsx_tag_close "</p>"'
            'offside_dedent'

    it @ 'multi open-close', @=> ::
      const offside_ast = scan_jsy_lines @#
        'first @'
        '  <outer>'
        '    <first class="nice">aaaa</first>'
        '    <second class=\'some\' {extra} />'
        '    <third class={param}>cccc</third>'
        '  </outer>'
        ''
        'second @ after'

      test_ast_tokens_content @ offside_ast,
        @[] 'src "first"'
            'jsy_op " @"'
            'offside_dedent'

        @[] 'jsx_tag "<outer>"'
            'offside_dedent'

        @[] 'jsx_tag "<first "'
            'jsx_attr_name "class="'
            'jsx_attr_str2 "\\"nice\\""'
            'jsx_tag_part ">"'
            'jsx_content "aaaa"'
            'jsx_tag_close "</first>"'
            'offside_dedent'

        @[] 'jsx_tag "<second "'
            'jsx_attr_name "class="'
            'jsx_attr_str1 "\'some\' "'
            'jsx_param "{"'
            'src "extra"'
            'jsx_param_end "}"'
            'jsx_tag_part " />"'
            'offside_dedent'

        @[] 'jsx_tag "<third "'
            'jsx_attr_name "class="'
            'jsx_param "{"'
            'src "param"'
            'jsx_param_end "}"'
            'jsx_tag_part ">"'
            'jsx_content "cccc"'
            'jsx_tag_close "</third>"'
            'offside_dedent'

        @[] 'jsx_tag_close "</outer>"'
            'offside_dedent'

        @[] 'src "second"'
            'jsy_op " @"'
            'src " after"'
            'offside_dedent'


    it @ `Multiple nested JSX to JS to JSX to JS`, @=> ::
      const offside_ast = scan_jsy_lines @#
         'const ex = @'
         '    <ul>{'
         '      this.props.items.map @ item => @'
         '        <li key={item.id}>{item.text}</li>'
         '    }</ul>'

      test_ast_tokens_content @ offside_ast,
        @[] 'src "const ex ="'
            'jsy_op " @"'
            'offside_dedent'

        @[] 'jsx_tag "<ul>"'
            'jsx_param "{"'
            'offside_dedent'

        @[] 'src "this.props.items.map"'
            'jsy_op " @"'
            'src " item =>"'
            'jsy_op " @"'
            'offside_dedent'

        @[] 'jsx_tag "<li "'
            'jsx_attr_name "key="'
            'jsx_param "{"'
            'src "item.id"'
            'jsx_param_end "}"'
            'jsx_tag_part ">"'
            'jsx_param "{"'
            'src "item.text"'
            'jsx_param_end "}"'
            'jsx_tag_close "</li>"'
            'offside_dedent'

        @[] 'jsx_param_end "}"'
            'jsx_tag_close "</ul>"'
            'offside_dedent'

      assert.deepEqual @
        jsy_transpile(offside_ast).split(/\n/), @[]
          'const ex =('
          '    <ul>{'
          '      this.props.items.map(item =>('
          '        <li key={item.id}>{item.text}</li>) )'
          '    }</ul>)'
          ''
