
import { genMochaSyntaxTestCases, standardTransforms } from './_xform_syntax_variations.jsy'

describe @ 'Tilde Async Generator Call Statements',
  genMochaSyntaxTestCases @ iterTildeAsyncGeneratorCalls, standardTransforms


function * iterTildeAsyncGeneratorCalls() ::
  yield * iterBlockTildeAsyncGeneratorSimpleCalls()
  yield * iterBlockTildeAsyncGeneratorNestedCalls()


function * iterBlockTildeAsyncGeneratorSimpleCalls() ::
  yield @{}
    title: 'call tidle async generator with no arguments'
    source: @[]
      'fn_target @~::>*'
      '  block'
    tokens: @[] 'name', '(', 'name', 'function', '*', '(', ')', '{', 'name', '}', ')'

  yield @{}
    title: 'call tidle async generator with two arguments'
    source: @[]
      'fn_target @~ a, b ::>*'
      '  block'
    tokens: @[] 'name', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', 

  yield @{}
    title: 'call tidle async generator with two arguments, arg-list second '
    source: @[]
      'fn_target @~ a, ...b ::>*'
      '  block'
    tokens: @[] 'name', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', 

  yield @{}
    title: 'call tidle async generator with two arguments, unpack second by position'
    source: @[]
      'fn_target @~ a, [b] ::>*'
      '  block'
    tokens: @[] 'name', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', 

  yield @{}
    title: 'call tidle async generator with two arguments, unpack second by name'
    source: @[]
      'fn_target @~ a, {b} ::>*'
      '  block'
    tokens: @[] 'name', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', 



function * iterBlockTildeAsyncGeneratorNestedCalls() ::
  yield @{}
    title: 'call tidle async generator with no arguments, two lines'
    source: @[]
      'outer @ fn_target @~::>*'
      '  stmt_a'
      '  stmt_b'
    tokens: @[] 'name', '(', 'name', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', ')'

  yield @{}
    title: 'call tidle async generator with two arguments, two lines'
    source: @[]
      'outer @ fn_target @~ a, b ::>*'
      '  stmt_a'
      '  stmt_b'
    tokens: @[] 'name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ')'

  yield @{}
    title: 'call tidle async generator with two arguments, arg-list second '
    source: @[]
      'outer @ fn_target @~ a, ...b ::>*'
      '  stmt_a'
      '  stmt_b'
    tokens: @[] 'name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ')'

  yield @{}
    title: 'call tidle async generator with two arguments, unpack second by position'
    source: @[]
      'outer @ fn_target @~ a, [b] ::>*'
      '  stmt_a'
      '  stmt_b'
    tokens: @[] 'name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ')'

  yield @{}
    title: 'call tidle async generator with two arguments, unpack second by name'
    source: @[]
      'outer @ fn_target @~ a, {b} ::>*'
      '  stmt_a'
      '  stmt_b'
    tokens: @[] 'name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ')'

