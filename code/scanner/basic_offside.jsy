export const rx_lines = /(\r\n|\r|\n)/ ;
export const rx_indent = /^([ \t]*)(.*)$/ ;
export const rx_indent_order = /^[\t]*[ ]*$/ ;

import createLoc from './_location.jsy'

export function basic_offside_scanner(source, feedback) ::
  if null == feedback ::
    feedback = @{}
      warn(msg, ...args) :: console.warn @ `[Offside Warning]:: ${msg}`, ...args

  const all_lines = []
  const q_raw_lines = source.split(rx_lines)

  const offside_line_proto = @{}
    __proto__: null
    get source() ::
      const {start, end} = this.loc
      return start.slice(end)

  let loc_tip = createLoc(source, feedback.file)
  let rx_indent_choice = null

  while 0 !== q_raw_lines.length ::
    const loc = @{} start: loc_tip = loc_tip.nextLine()

    const src_line = q_raw_lines.shift() || ''
    loc.end = loc_tip = loc_tip.move(src_line)

    const src_line_end = q_raw_lines.shift() || ''
    loc_tip = loc_tip.move(src_line_end)


    const match = rx_indent.exec(src_line)
    const loc_indent = loc.start.move(match[1])
    const is_blank = 0 === match[2].length

    if ! rx_indent_order.test(match[1]) ::
      throw loc.start.syntaxError @ `Mixed tab and space indent (${loc_indent})`, 

    const raw = @{}
      line: src_line
      line_end: src_line_end
      indent: match[1]
      content: match[2]

    let node
    if is_blank ::
      node = @{}
        type: 'offside_blank_line', loc
        is_blank

    else ::
      const indent_node = @{}
        type: 'offside_indent',
        loc: @{}
          start: loc.start
          end: loc_indent
        len_indent: match[1].length
        indent: match[1]

      const conent_node = @{}
        type: 'offside_content',
        loc: @{}
          start: loc_indent
          end: loc.end
        len_indent: match[1].length
        indent: match[1]
        content: match[2]

      node = @{}
        __proto__: offside_line_proto
        type: 'offside_line', loc
        indent: indent_node
        content: conent_node
        len_indent: match[1].length

    Object.defineProperties @ node, @{} raw: {value: raw}
    all_lines.push @ node

  add_indent_info(all_lines)
  return all_lines


function add_indent_info(all_lines) ::
  let len_dedent = 0 // how far to dedent to next outer level
  let len_stack = [0]
  // work backwards from the file end
  for let i = all_lines.length-1 ; i>=0 ; i-- ::
    let ln = all_lines[i]
    if ln.is_blank :: continue

    ln.len_dedent = len_dedent

    // how many indent prefix chars per line
    let len_indent = ln.len_indent

    let len_inner
    while len_stack[0] > len_indent ::
      len_inner = len_stack.shift()

    if len_stack[0] < len_indent ::
      // len_indent is the new stack tip
      len_stack.unshift @ len_indent

    if len_inner ::
      ln.len_inner = len_inner

    len_dedent = len_indent
