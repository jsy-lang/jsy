import { scan_offside_contexts } from './basic_offside_contexts.jsy'
import { js_context_scanners } from './scan_javascript.jsy'
import { scanner_nestedSrc } from './scan_clike.jsy'
import { SourceCodeScanner, RegExpScanner } from './context_scanner.jsy'
import { EmbeddedDynamicScanner, TaggedRegExpScanner } from './context_scanner.jsy'


export const scanner_jsxContent =
  new SourceCodeScanner @:
      description: 'JSX Content Scanner'
      op: 'jsx_content'

export const scanner_jsxContentExpr =
  new RegExpScanner @:
      description: 'JSX Content Expression'
      example: '{ param }'
      op: 'jsx_content_expr'
      kind: '{'
      rx_open: /\s*({)/,
      rx_close: /()/,

      nestTrim(content, close, isContinue) ::
      post_scan(ctx) :: jsxArgNesting @ ctx, null

export const scanner_jsxAttrNameValue =
  new RegExpScanner @:
      description: 'JSX attribute name value'
      op: 'jsx_attr_name'
      rx_open: /\s*([a-zA-Z0-9_:.\-]+)/,
      rx_close: /\s*(=)\s*/,

export const scanner_jsxAttrNameOnly =
  new RegExpScanner @:
      description: 'JSX attribute name only'
      op: 'jsx_attr_name_only'
      rx_open: /\s*([a-zA-Z0-9_:.\-]+)/,
      rx_close: /()/,

      post_scan(ctx, close) ::
        return this.nestMatch @ close,
          ctx, this.hostScanner || this

export const scanner_jsxAttrSingle =
  new RegExpScanner @:
      description: 'JSX Single quote attribute literal'
      multiline: true
      op: 'jsx_attr_str1'
      rx_open: /\s*(')/,
      rx_close: /(?:\\.|[^'])*(')\s*/,

export const scanner_jsxAttrDouble =
  new RegExpScanner @:
      description: 'JSX Double quote attribute literal'
      multiline: true
      op: 'jsx_attr_str2'
      rx_open: /\s*(")/,
      rx_close: /(?:\\.|[^"])*(")\s*/,

export const scanner_jsxTagClose =
  new TaggedRegExpScanner @:
      description: 'JSX Close Tag'
      example: '</tag>'
      op: 'jsx_tag_close'
      kind: '</'
      multiline: true
      rx_open: /(<\/)\s*/
      rx_close: /([a-zA-Z0-9_:.\-]+)\s*>/

      tagScanner(ctx) ::
        this.restore_scanner = ctx.scanner

      post_scan(ctx, close) ::
        if close !== this.tag ::
          throw ctx.loc_tip.syntaxError @
            `Mismatched JSX close tag "</${close}>", expected "</${this.tag}>". (${ctx.loc_tip})`

        ctx.scanner = this.restore_scanner



export const scanner_jsxTag =
  new TaggedRegExpScanner @:
      description: 'JSX Tag'
      multiline: true
      op: 'jsx_tag'
      op_continue: 'jsx_tag_part'

      rx_open: /(<)tag\b\s*/
      rx_close: /\s*?($|\/>|[{'">]|[a-zA-Z0-9_:.\-]+=?)/

      nesting: @{}
        '>': 'host' // use hostScanner
        '/>': true // pop ctx.scanner

      nestingEnd: @{}
        '{': jsxArgNesting
        '=': scanner_jsxAttrNameValue
        "'": scanner_jsxAttrSingle
        '"': scanner_jsxAttrDouble

      nestTrim(content, close, isContinue) ::
        if ! this.nesting[close] ::
          content = content.slice(0, - close.length)
        return content || null

      nestMatch(close, ctx, hostScanner) ::
        let inner = this.nesting[close]
        if undefined === inner ::
          inner = this.nestingEnd[close.slice(-1)]
            || scanner_jsxAttrNameOnly

        if true !== inner && 'host' !== inner ::
          // we're actually pushign two scanners onto the stack
          // the first for this context, the second for the attribute
          ctx.scanner = hostScanner = this.continueScanner(ctx)

        return this.nestWith @ inner, ctx, hostScanner

function jsxArgNesting(ctx, hostScanner) ::
  const src = scanner_nestedSrc.withOuter @:
    scanner: null !== hostScanner
      ? hostScanner.continueScanner(ctx)
      : ctx.scanner
    stack: @[] '{' // from the jsx parameter opening
    ast_end: 'jsx_param_end'

  src.emit_ast @ ctx, '{', 'jsx_param'

  ctx.scanner = ctx.dispatch_root.cloneWithScanner(src)




export const scanner_jsx =
  new EmbeddedDynamicScanner @:
      description: 'Embedded JSX expression'
      example: '<section>content</section>'
      kind:'<'
      disp_name: 'jsx'
      op: 'jsx'

      // recognize by '<tag' followed by 'attr=' or '/>' or '>'
      rx_open: /(<)([a-zA-Z0-9_:.\-]+)(?=\s*?(?:$|\/>|>|\s{|\s[a-zA-Z0-9_:\-]+=?))/
      rx_close: /.*$/

      leader: scanner_jsxTag
      trailer: scanner_jsxTagClose


export const scanner_embedded_jsx =
  scanner_jsx.andDispatchWith @:
    description: 'JSX Dispatch Scanner (0)'
    disp_name: 'jsx'

    scannerList: @[]
      scanner_jsxContent
      scanner_jsxContentExpr

export const scanner_jsx_close_fragment =
  new RegExpScanner @:
      description: 'Embedded JSX fragment close expression'
      example: '</>'
      op: 'jsx_frag_close'
      kind: '</'
      allow_blank_close: true

      rx_open: /(<\/)\s*/
      rx_close: /([a-zA-Z0-9_:.\-]*)\s*>/

      post_scan(ctx, close) ::
        if close ::
          throw ctx.loc_tip.syntaxError @
            `Mismatched JSX fragment close tag "</${close}>", expected "</$>". (${ctx.loc_tip})`

        ctx.scanner = this.restore_scanner

export const scanner_jsx_fragment =
  new RegExpScanner @:
      description: 'Embedded JSX fragment expression'
      example: '<></>'
      op: 'jsx_frag'
      kind: '<>'

      rx_open: /(<>)/
      rx_close: /.*($|<\/>)/

      nestTrim(content, close, isContinue) ::
        return '<>'

      post_scan(ctx) ::
        const jsx_frag_close = @{}
          __proto__: scanner_jsx_close_fragment
          restore_scanner: ctx.scanner

        const ds_body = 
          scanner_embedded_jsx.cloneWithScanner @
            jsx_frag_close

        ds_body.description = 'Fragment' + ds_body.description
        const disp = ds_body.get_active_dispatch(ctx)
        ds_body.ln_first = disp && disp.ln_first || ctx.ln

        ctx.scanner = ds_body




export const jsx_context_scanners = Object.freeze @#
  scanner_jsx_fragment
  scanner_jsx
  ... js_context_scanners

export function scan_javascript_with_jsx(source, feedback) ::
  return scan_offside_contexts(source, feedback, jsx_context_scanners)


