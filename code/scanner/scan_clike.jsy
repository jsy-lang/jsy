import { SourceCodeScanner, RegExpScanner, MultiLineScanner } from './context_scanner.jsy'
import scan_offside_contexts from './basic_offside_contexts.jsy'

export const clike_context_scanners = Object.freeze @#
  new SourceCodeScanner @:
      description: 'Source Code Scanner'
      op: 'src'

  new RegExpScanner @:
      description: 'Hashbang directive'
      example: '#!/usr/bin/env node'
      op: 'hashbang', kind:'#!'
      rx_open: /^(#!)/, rx_close: /.*($)/,
      firstline: true

  new RegExpScanner @:
      description: 'Comment to end of line'
      example: '// comment'
      op: 'comment_eol', kind:'//'
      rx_open: /(\/\/)/, rx_close: /.*($)/,

  new MultiLineScanner @:
      description: 'Multi-line comment'
      example: '/* comment */'
      op: 'comment_multi', kind:'/*'
      rx_open: /(\/\*)/, rx_close: /.*?(\*\/|$)/,

  new RegExpScanner @:
      description: 'Single quote string literal'
      example: "'single quote'"
      op: 'str_single', kind:"'"
      rx_open: /(')/, rx_close: /(?:\\.|[^'])*('|$)/,

  new RegExpScanner @:
      description: 'Double quote string literal'
      example: '"double quote"'
      op: 'str_double', kind:'"'
      rx_open: /(")/, rx_close: /(?:\\.|[^"])*("|$)/,


export default scan_clike
export function scan_clike(source, feedback) ::
  return scan_offside_contexts(source, feedback, clike_context_scanners)

