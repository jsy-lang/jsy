import { SourceCodeScanner, NestedCodeScanner, RegExpScanner, MultiLineScanner } from './context_scanner.jsy'
import { scan_offside_contexts } from './basic_offside_contexts.jsy'

export const scanner_source =
  new SourceCodeScanner @:
      description: 'Source Code Scanner'
      op: 'src'

export const scanner_nestedSrc =
  new NestedCodeScanner @:
    op: 'src', description: 'Template parameter source'
    char_pairs: @{}
      '{': true, '}': '{'
      '(': true, ')': '('
      '[': true, ']': '['

export const scanner_hashbangDirective =
  new RegExpScanner @:
      description: 'Hashbang directive'
      example: '#!/usr/bin/env node'
      op: 'hashbang', kind:'#!'
      rx_open: /^(#!)/, rx_close: /.*($)/,
      firstline: true
      allow_blank_close: true

export const scanner_commentEOL =
  new RegExpScanner @:
      description: 'Comment to end of line'
      example: '// comment'
      op: 'comment_eol', kind:'//'
      rx_open: /(\/\/)/, rx_close: /.*($)/,
      allow_blank_close: true

export const scanner_commentMultiLine =
  new MultiLineScanner @:
      description: 'Multi-line comment'
      example: '/* comment */'
      op: 'comment_multi', kind:'/*'
      rx_open: /(\/\*)/, rx_close: /.*?(\*\/|$)/,

export const scanner_strSingle =
  new RegExpScanner @:
      description: 'Single quote string literal'
      example: "'single quote'"
      op: 'str1', kind:"'"
      rx_open: /(')/, rx_close: /(?:\\.|[^'])*('|$)/,

export const scanner_strDouble =
  new RegExpScanner @:
      description: 'Double quote string literal'
      example: '"double quote"'
      op: 'str2', kind:'"'
      rx_open: /(")/, rx_close: /(?:\\.|[^"])*("|$)/,

export const scanner_preprocessor =
  new RegExpScanner @:
      description: 'Preprocessor directive'
      example: '# IF platform === "web"'
      op: 'preprocessor', kind:'#'
      rx_open: /^\s*(#)/, rx_close: /.*?([\\]?)\s*$/,
      invert_close: true // preprocessor uses '\' continuations
      allow_blank_close: true


export const clike_context_scanners = Object.freeze @#
  scanner_source
  scanner_hashbangDirective
  scanner_commentEOL
  scanner_commentMultiLine
  scanner_strSingle
  scanner_strDouble
  scanner_preprocessor


export function scan_clike(source, feedback) ::
  return scan_offside_contexts(source, feedback, clike_context_scanners)

