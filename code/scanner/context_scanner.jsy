function ensure_progress(loc0, loc1) ::
  if loc0.pos == loc1.pos ::
    throw new Error @ `Scanner failed to make progress`

  if loc0.pos > loc1.pos ::
    throw new Error @ `Scanner went backward`


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class DispatchScanner ::
  constructor(disp_name) ::
    this.disp_name = disp_name || 'root'
    this.by_kind = {}
    this.by_op = {}

  startCompile() ::
    Object.defineProperties @ this, @{}
      regexp: @{} value: (this.regexp || []).slice()
    this.by_kind = Object.assign @ {}, this.by_kind
    this.by_op = Object.assign @ {}, this.by_op
    return this

  addScannerList(scannerList) ::
    for const scanner of scannerList ::
      if scanner ::
        this.addScanner(scanner)
    return this

  addScanner(scanner) ::
    if scanner.withDispatch ::
      scanner = scanner.withDispatch(this)

    if scanner.is_body ::
      this.ds_body = scanner

    this.by_op[scanner.op] = scanner

  addRegExpScanner(scanner, kind, re_disp) ::
    if kind ::
      this.by_kind[kind] = scanner.op
      this.regexp.push @ `(?:${re_disp})`
    return this

  finishCompile(ds_body) ::
    const rx = new RegExp @ this.regexp.join('|'), 'g'

    if undefined === ds_body ::
      ds_body = this.ds_body
    return Object.defineProperties @ this, @{}
      rx: @{} value: rx
      ds_body: @{} value: ds_body, writable: true


  cloneWithScanner(...scanners) ::
    return this.cloneWithScannerList(scanners)
  cloneWithScannerList(scanners) ::
    const self = Object.create(this)
    self.level = 1 + 0|self.level
    self.description = self.description.replace @
      /\(\d+\)/, `(${self.level})`

    self.startCompile()
    self.addScannerList(scanners)
    self.finishCompile()
    return self


  newline(ctx) ::

  scan(ctx, idx0) ::
    const loc0 = ctx.loc_tip
    const res = this._scan(ctx, idx0)
    ensure_progress @ loc0, ctx.loc_tip
    return res

  _scan(ctx, idx0) ::
    ctx.dispatch = ctx[`dispatch_${this.disp_name}`] = this

    const rx = this.rx
    rx.lastIndex = idx0 // regexp powered source.slice()

    const source = ctx.ln_source // slice is done by setting lastIndex
    const match = rx.exec(source)

    if null === match ::
      return this.ds_body.scan(ctx, idx0)

    const idx1 = match.index
    if idx0 !== idx1 ::
      return this.ds_body.scan_fragment @
        ctx, source.slice(idx0, idx1)

    const kind = match.filter(Boolean)[1]
    const op = this.by_kind[kind]
    const op_scanner = this.by_op[op]
    if ! op_scanner ::
      throw new Error @ `No scanner registered for « ${kind} »`

    return op_scanner.scan(ctx, idx1)

  scan_fragment(ctx, content) ::
    throw new Error @ `Dispatch scanner does not support fragments`


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class DispatchFirstlineScanner extends DispatchScanner ::
  scan(ctx, idx0) ::
    ctx.scanner = this.ds_body
    return super.scan(ctx, idx0)

  scan_fragment(ctx, content) ::
    throw new Error @ `First line dispatch scanner does not support fragments`


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class EmbeddedDispatchScanner extends DispatchScanner ::
  constructor(options) ::
    super @ options.disp_name
    Object.assign(this, options)
    this._compileForInit()

  _compileForInit() ::
    this.startCompile()
    this.addScannerList(this.scannerList)
    this.finishCompile()


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class BaseSourceScanner ::
  constructor(options) ::
    Object.assign(this, options)
    this._compileForInit()

  _compileForInit() ::

  withDispatch(ds) :: return this

  emit_ast(ctx, content, ast_type) ::
    const start = ctx.loc_tip
    const end = ctx.loc_tip = start.move(content || 0)
    const ast = @{} type: ast_type || this.op, loc: {start, end}, content
    this._ast_extend(ctx, ast)
    ctx.parts.push @ ast
    return ast

  _ast_extend(ctx, ast) ::

  newline(ctx) ::
  scan_fragment(ctx, content) ::
    throw new Error @ `Scanner (${this.description}) does not support fragments`
  scan(ctx, idx0) ::
    throw new Error @ `Scanner (${this.description}) does not support scans`


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class SourceCodeScanner extends BaseSourceScanner ::
  get is_body() :: return true

  scan_fragment(ctx, content) ::
    this.scan_content @ ctx, content

  scan(ctx, idx0) ::
    this.scan_content @ ctx, ctx.ln_source.slice(idx0)

  scan_content(ctx, content) ::
    if content ::
      this.emit_ast @ ctx, content


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class NestedCodeScanner extends SourceCodeScanner ::
  constructor(options) ::
    super(options)
    if ! this.char_pairs ::
      throw new Error @ 'Missing required char_pairs mapping'

    const chars = Object.keys(this.char_pairs).join('\\')
    this.rx = new RegExp(`([${chars}])`)

  withOuter(options) ::
    const scanner = options.scanner
    if 'function' !== typeof scanner.scan ::
      throw new Error @ `Expected valid outer scanner`
    delete options.scanner

    const self = Object.create @ this, @{}
      restore_scanner: @{} value: scanner
    Object.assign @ self, options
    return self

  scan_content(ctx, nested_content) ::
    const {stack, char_pairs} = this

    let content = ''
    for const tok of nested_content.split(this.rx) ::
      const p = 1 === tok.length ? char_pairs[tok] : undefined

      if undefined === p ::
        content += tok
        continue

      if true === p ::
        content += tok
        stack.push @ tok
        continue

      const tip = stack.pop()
      if tip !== p ::
        const loc = ctx.loc_tip.move(content)
        throw new SyntaxError @ `Mismatched nesting in ${this.description} (${loc.toString()})`

      if 0 !== stack.length ::
        content += tok
        continue

      if content ::
        this.emit_ast @ ctx, content
      this.emit_ast @ ctx, tok, this.ast_end || 'nested_end'
      ctx.scanner = this.restore_scanner
      return

    // all tokens with non-zero stack
    if content ::
      this.emit_ast @ ctx, content


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class RegExpScanner extends BaseSourceScanner ::

  _compileForInit() ::
    const {rx_open, rx_close} = this
    const rx_disp = new RegExp @
      (rx_open ? rx_open.source : '') + rx_close.source

    const rx_resume = new RegExp @
      '^' + rx_close.source

    Object.defineProperties @ this, @{}
      rx_disp: @{} value: rx_disp
      rx_resume: @{} value: rx_resume

  withDispatch(ds) ::
    this.compileForDispatch(ds)
    return this

  compileForDispatch(ds) ::
    if undefined === this.kind :: return

    const match = this.rx_disp.exec @ this.example
    if null === match || this.kind !== match[1] || null == match[2] ::
      throw new Error @ `Invalid scanner regexp and/or example (${this.description})`

    ds.addRegExpScanner @ this, this.kind, this.rx_disp.source



  newline(ctx) ::
    if ! this.multiline && ! this.allow_blank_close ::
      throw new SyntaxError @ `Newline in ${this.description} (${ctx.ln.loc.end.toString()})`

  _ast_extend(ctx, ast) ::
    const ln = this.ln_first || ctx.ln
    if undefined !== ln.len_inner ::
      ast.block_indent = ln.len_inner
    return ast

  scan(ctx, idx0) ::
    const match = this.rx_disp.exec @ ctx.ln_source.slice(idx0)
    const [content, open, close] = match

    const t_content = this.nestTrim(content, close, false)
    if t_content :: this.emit_ast @ ctx, t_content
    return this.post_scan(ctx, close)

  scan_continue(ctx, idx0) ::
    const match = this.rx_resume.exec @ ctx.ln_source.slice(idx0)
    const [content, close] = match

    const t_content = this.nestTrim(content, close, true)
    if t_content :: this.emit_ast @ ctx, t_content
    return this.post_scan(ctx, close)

  nestTrim(content, close, isContinue) ::
    const nestingTrim = this.nestingTrim
    if undefined !== nestingTrim ::
      let trim = nestingTrim[close]
      if true === trim :: trim = close
      if trim :: return content.slice(0, - trim.length)

    return content

  post_scan(ctx, close) ::
    if ! close ::
      if ! this.allow_blank_close ::
        ctx.scanner = this.continueScanner(ctx)
      return

    return this.nestMatch @ close,
      ctx, this.hostScanner || this

  nestMatch(close, ctx, hostScanner) ::
    const nesting = this.nesting
    if undefined !== nesting ::
      return this.nestWith @
        nesting[close],
        ctx, hostScanner
    return true // pop ctx.scanner

  nestWith(nested, ctx, hostScanner) ::
    if true === nested || undefined === nested || null === nested ::
      return true // pop ctx.scanner

    else if hostScanner === nested || 'host' === nested ::
      ctx.scanner = hostScanner.continueScanner(ctx)
      return

    else if 'function' === typeof nested.nestedScanner ::
      ctx.scanner = nested.nestedScanner(ctx)
      return

    else if 'function' === typeof nested ::
      return nested @ ctx, hostScanner

    return nested


  nestedScanner(ctx) ::
    return this._asNestedScanner @ ctx, 'nest', @{}

  continueScanner(ctx) ::
    return this._asNestedScanner @ ctx, 'cont', @{}
      op: this.op_continue || this.op
      continueScanner(ctx) :: return this
      scan(ctx, idx0) ::
        this.scan_continue(ctx, idx0)

  _asNestedScanner(ctx, desc, body) ::
    const restore_scanner = ctx.scanner
    const self = @{}
      __proto__: this
      description: `${this.description} (${desc})`
      ln_first: ctx.ln

      _pop_scanner(ctx) ::
        if this.op_pop ::
          this.emit_ast @ ctx, '', this.op_pop
        ctx.scanner = restore_scanner

      scan(ctx, idx0) ::
        if true === super.scan(ctx, idx0) ::
          this._pop_scanner(ctx)

      scan_continue(ctx, idx0) ::
        if true === super.scan_continue(ctx, idx0) ::
          this._pop_scanner(ctx)

    return Object.assign @ self, body


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class MultiLineScanner extends RegExpScanner ::
  newline(ctx) ::
  get multiline() :: return true

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class TaggedRegExpScanner extends RegExpScanner ::
  withTag(ctx, tag, hostScanner) ::
    const rx_replace = this.rx_replace || /tag/g

    const re_open = this.rx_open.source
      .replace @ rx_replace, tag
    const re_close = this.rx_close.source
      .replace @ rx_replace, tag

    const rx_open = new RegExp @ re_open
    const rx_close = new RegExp @ re_close
    const rx_disp = new RegExp @ re_open + rx_close.source
    const rx_resume = new RegExp @ '^' + re_close

    const self = @{} __proto__: this, hostScanner,
      rx_open, rx_close, rx_resume, rx_disp,
      compileForDispatch(ds) ::
        // skip testing example for second pass of this object
        ds.addRegExpScanner @ this, this.kind, this.rx_disp.source

    self.tagScanner(ctx, tag, hostScanner)
    return self

  tagScanner(ctx, tag, hostScanner) ::


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class DynamicScanner extends MultiLineScanner ::
  scan(ctx, idx0) ::
    const leader_match = this.rx_disp.exec @ ctx.ln_source.slice(idx0)

    const self = this.withLeaderTag @ ctx, leader_match[2]
    return self._leader.scan(ctx, idx0)

  withLeaderTag(ctx, tag) ::
    const self = @{} __proto__: this, __root__: this.__root__ || this

    self._trailer = this.trailer && this.trailer.withTag @ ctx, tag, self
    self._leader = this.leader.withTag @ ctx, tag, self
    return self


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

export class EmbeddedDynamicScanner extends DynamicScanner ::
  continueScanner(ctx) ::
    return this.ds_body.cloneWithScanner @ this._trailer

  andDispatchWith(options) ::
    options.scannerList = options.scannerList.concat @# this
    const ds_body = new EmbeddedDispatchScanner(options)
    this.ds_body = ds_body
    return ds_body

