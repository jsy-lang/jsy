import { DispatchScanner, DispatchFirstlineScanner } from './context_scanner.jsy'

export function bind_context_scanner(context_scanners) ::
  if ! Object.isFrozen(context_scanners) || ! Array.isArray(context_scanners) ::
    throw new TypeError @ `Expected a frozen array of context scanners`

  const cache = bind_context_scanner.cache || new WeakMap()
  if cache !== bind_context_scanner.cache ::
    bind_context_scanner.cache = cache

  let res = cache.get(context_scanners)
  if undefined === res ::
    res = compile_context_scanner(context_scanners)
    cache.set(context_scanners, res)
  return res


function compile_context_scanner(context_scanners) ::
  const ds_first = build_composite_scanner(context_scanners)
  return context_scanner

  function context_scanner(offside_lines) ::
    const ctx = @{} scanner: ds_first.clone0()

    for const ln of offside_lines ::
      if ln.is_blank ::
        delete ln.content
        ctx.scanner.newline(ctx, true)
        continue


      ctx.parts = []
      ctx.ln = ln

      scan_source(ctx, ln.content)

      if 0 === ctx.parts.length ::
        throw new Error @ `No parts generated by context scanner`

      ln.content = ctx.parts
      ctx.scanner.newline(ctx, false)

    ctx.scanner.newline(ctx, true)
    return offside_lines


  function scan_source(ctx, ln_content) ::
    const ln_source = ctx.ln_source = ln_content.content
    const loc_start = ctx.loc_tip = ctx.loc_start = ln_content.loc.start
    const pos0 = loc_start.pos

    while true ::
      const idx0 = ctx.loc_tip.pos - pos0
      if idx0 >= ln_source.length ::
        return // done with this line

      ctx.scanner.scan @ ctx, idx0


  function build_composite_scanner() ::
    const ds_body = new DispatchScanner().startCompile()
    ds_body.description = 'JSY Dispatch scanner (0)'
    const ds_first = new DispatchFirstlineScanner().startCompile()
    ds_first.description = 'Firstline JSY Dispatch scanner (0)'

    for const scanner of context_scanners ::
      if ! scanner :: continue

      const ds = scanner.firstline ? ds_first : ds_body
      ds.addScanner(scanner)

    ds_body.finishCompile()
    return ds_first.finishCompile(ds_body)

