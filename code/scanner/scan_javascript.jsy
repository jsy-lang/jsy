import { RegExpScanner, MultiLineScanner, NestedCodeScanner } from './context_scanner.jsy'
import scan_offside_contexts from './basic_offside_contexts.jsy'
import { clike_context_scanners } from './scan_clike.jsy'

export const js_context_scanners = Object.freeze @ clike_context_scanners.concat @#
  new RegExpScanner @:
      description: 'RegExp literal'
      example: '/regexp/'
      op: 'regexp', kind:'/'
      rx_open: /(\/)(?=[^\/])/, rx_close: /(?:\\.|[^\/])*(\/|$)/,

  new MultiLineScanner @:
      description: 'Template string literal'
      example: '`template string`'
      op: 'str_multi', kind:'`'
      rx_open: /(`)/, rx_close: /(?:\\.|\$(?!{)|[^\$`])*(`|\${|$)/,           // ` comment hack to reset syntax highligherâ€¦
      nesting: @{}
        '${': templateArgNesting

const nested_src = new NestedCodeScanner @:
  op: 'src', description: 'Template parameter source'
  char_pairs: @{}
    '{': true, '}': '{'
    '(': true, ')': '('
    '[': true, ']': '['

export default scan_javascript
export function scan_javascript(source, feedback) ::
  return scan_offside_contexts(source, feedback, js_context_scanners)


function templateArgNesting(ctx, dispatch, scanner) ::
  const src = nested_src.withOuter @:
    scanner
    stack: @[] '{' // from the template parameter opening
    ast_end: 'template_param_end'
    
  src.emit_ast @ ctx, '', 'template_param'

  ctx.scanner = dispatch.cloneWithOps @: src

