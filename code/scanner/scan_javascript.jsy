import scan_offside_contexts from './basic_offside_contexts.jsy'
import { RegExpScanner, MultiLineScanner } from './context_scanner.jsy'
import { clike_context_scanners, scanner_nestedSrc } from './scan_clike.jsy'


export const scanner_regexp =
  new RegExpScanner @:
      description: 'RegExp literal'
      example: '/regexp/'
      op: 'regexp'
      kind:'/'
      rx_open: /(\/)(?=[^\/])/
      rx_close: /(?:\\.|[^\/])*(\/|$)/



export const scanner_strTemplate =
  new MultiLineScanner @:
      description: 'Template string literal'
      example: '`template string`'
      op: 'str_multi'
      kind:'`'
      rx_open: /(`)/
      rx_close: /(?:\\.|\$(?!{)|[^\$`])*(`|\${|$)/           // `) comment hack to reset syntax highligherâ€¦
      nesting: @{}
        '${': templateArgNesting

function templateArgNesting(ctx, dispatch, hostScanner) ::
  const src = scanner_nestedSrc.withOuter @:
    scanner: hostScanner.continueScanner(ctx)
    stack: @[] '{' // from the template parameter opening
    ast_end: 'template_param_end'

  src.emit_ast @ ctx, '', 'template_param'

  ctx.scanner = dispatch.cloneWithOps @: src



export const js_context_scanners = Object.freeze @ clike_context_scanners.concat @#
  scanner_regexp
  scanner_strTemplate

export default scan_javascript
export function scan_javascript(source, feedback) ::
  return scan_offside_contexts(source, feedback, js_context_scanners)

