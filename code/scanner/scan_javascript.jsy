import { scan_offside_contexts } from './basic_offside_contexts.jsy'
import { RegExpScanner, MultiLineScanner } from './context_scanner.jsy'
import { scanner_source, clike_context_scanners, scanner_nestedSrc } from './scan_clike.jsy'

export const scanner_regexp =
  new RegExpScanner @:
      description: 'RegExp literal'
      example: '/regexp/'
      op: 'regexp'
      kind: '/'

      /*
      rx_open: rx_or_parts @:
        opts: @[]
          /(\/)(?![\/\*])/    // start of a potential regexp literal, but not a comment

          @{}                 // ...complex regexp grammar...
            pre: ''
            opts: @[]
              /\\./           // ...any escaped character...
              /[^\\\/\[]/     // ...or any non-special character...

              @{}             // ... or a bracket [] expression...
                pre: '\\['        // started with a '[' character
                opts: @[]
                  /\\./           // ...with any escaped character
                  /[^\]]/         // ...or any non-escaped non-ending ']' character
                post: '*\\]'      // ended with an ending ']' character

            post: '+'         // one or more interior expressions

          /(?=\/)/            // (lookahead) end of a regexp literal
      */

      rx_open: new RegExp @
        /(\/)(?![\/\*])/ .source + // a RegExp start but not a comment
        /(?:\\.|[^\\\/\[]|\[(?:\\.|[^\]])*\])+/ .source

      rx_close: /(\/[a-z]*)\s*(?=[;.,)\]}]|$)/  // inspired by vim's syntax highlighting end

      //multiline: false // spec https://tc39.es/ecma262/#sec-literals-regular-expression-literals


export const scanner_strTemplate =
  new MultiLineScanner @:
      description: 'Template quote string literal'
      example: '`template string`'
      op: 'str_template'
      kind: '`'
      rx_open: /(`)\\?/
      rx_close: /(?:\\.|\$(?!{)|[^\$`\\])*(`|\${|$)/
      nesting: @{}
        '${': templateArgNesting

      ast_scan_match(scan, ast) ::
        if '`' == scan.open ::
          ast.tmpl_opened = true
        if '`' == scan.close ::
          ast.tmpl_closed = true

function templateArgNesting(ctx, hostScanner) ::
  const src = scanner_nestedSrc.withOuter @:
    scanner: hostScanner.continueScanner(ctx)
    stack: @[] '{' // from the template parameter opening
    ast_end: 'template_param_end'

  src.emit_ast @ ctx, '', 'template_param'

  ctx.scanner = ctx.dispatch_root.cloneWithScanner(src)



export const js_context_scanners = Object.freeze @#
  scanner_regexp
  scanner_strTemplate
  ... clike_context_scanners

export function scan_javascript(source, feedback) ::
  return scan_offside_contexts(source, feedback, js_context_scanners)

