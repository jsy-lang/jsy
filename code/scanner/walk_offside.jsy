export default walk_offside
export function walk_offside(offside_lines) ::
  if null === offside_lines && Array.isArray(this) ::
    offside_lines = this
  return WalkOffside.create @ offside_lines

export class WalkOffside ::
  * iter_blocks(allowOuterBlock) ::
    let tip = this
    while tip ::
      yield tip
      tip = tip.next_block(allowOuterBlock)

  [Symbol.iterator]() ::
    return this.iter_blocks()

  has_offside_block() ::
    return this.inner_block(true)

  inner_block(asBool) ::
    const idx_next = 1 + this.idx_tip
    const ln = this.offside_lines[idx_next]
    if ln && this.ln_tip.len_indent < ln.len_indent ::
      return asBool ? true : this.__walk(ln, idx_next)
    return asBool ? false : null

  next_block(allowOuterBlock) ::
    const idx_next = 1 + this.idx_tip
    const outer_len_indent = this.ln_tip.len_indent

    let ln
    for let i = idx_next; undefined !== (ln = this.offside_lines[i]); i++ ::
      if ln.is_blank ::
        continue
      else if outer_len_indent < ln.len_indent ::
        continue
      else if outer_len_indent == ln.len_indent ::
        return this.__walk(ln, i)
      else if allowOuterBlock ::
        return this.__walk(ln, i)
      else return null
    return null

  lines_of_block() ::
    const idx_next = 1 + this.idx_tip
    const outer_len_indent = this.ln_tip.len_indent

    let i, ln
    for i = idx_next; undefined !== (ln = this.offside_lines[i]); i++ ::
      if ! ln.is_blank && outer_len_indent >= ln.len_indent ::
        break
    return this.offside_lines.slice(idx_next, i)

  toString() ::
    const lines = this.lines_of_block().map @ e => `> ${e.raw.line}`
    lines.unshift @ `= ${this.ln_tip.raw.line}`
    return lines.join('\n')


  // Use prototype patterns for attribute sharing
  static create(offside_lines) ::
    const self = new this()
    Object.defineProperties @ self, @{}
      __root__: @{} value: self
      offside_lines: @{} value: offside_lines
    return self.__walk(offside_lines[0], 0)

  __walk(ln_tip, idx_tip) ::
    if ln_tip !== this.offside_lines[idx_tip] ::
      throw new Error @ `ln_tip is not at idx_tip in offside_lines`
    return @{} ln_tip, idx_tip, __proto__: this.__root__ || this

