export const at_outer_offside = @[]
  @{} jsy_op: '::@', pre: '(', post: ')', nestInner: false, implicitCommas: false
  @{} jsy_op: '::()', pre: '(', post: ')', nestInner: false, implicitCommas: false
  @{} jsy_op: '::{}', pre: '{', post: '}', nestInner: false, implicitCommas: false
  @{} jsy_op: '::[]', pre: '[', post: ']', nestInner: false, implicitCommas: false
  @{} jsy_op: '::', pre: '{', post: '}', nestInner: false, implicitCommas: false, is_kw_close: true

export const at_inner_offside = @[]
  @{} jsy_op: '@:', pre: '({', post: '})', nestInner: true, implicitCommas: true
  @{} jsy_op: '@#', pre: '([', post: '])', nestInner: true, implicitCommas: true
  @{} jsy_op: '@=>>', pre: '(async ()=>', post: ')', nestInner: true, implicitCommas: false
  @{} jsy_op: '@=>', pre: '(()=>', post: ')', nestInner: true, implicitCommas: false
  @{} jsy_op: '@()', pre: '(', post: ')', nestInner: true, implicitCommas: true
  @{} jsy_op: '@{}', pre: '{', post: '}', nestInner: true, implicitCommas: true
  @{} jsy_op: '@[]', pre: '[', post: ']', nestInner: true, implicitCommas: true
  @{} jsy_op: '@', pre: '(', post: ')', nestInner: true, implicitCommas: true

export const at_offside = [].concat @
  at_outer_offside
  at_inner_offside

export const at_offside_map = at_offside.reduce @
  (m, ea) => ::
    m[ea.jsy_op] = ea
    return m
  {}


export const kw_jsy_op = @{}
  normal: @{} jsy_op: 'kw', pre: '(', post: ')', in_kw_block: true
  explicit: @{} jsy_op: 'kw', pre: '', post: '', in_kw_block: true

export const keywords_with_args = @[] 'if', 'while', 'for await', 'for', 'switch'
export const keywords_locator_parts = [].concat @
  keywords_with_args.map @ e => `else ${e}`
  keywords_with_args
  @[] 'catch'

