import { at_offside_map, kw_jsy_op, kwex_jsy_op  } from './jsy_operators.jsy'
import scan_jsy from './scan_jsy.jsy'

export default transpile_jsy
export const jsy_transpile = transpile_jsy
export function transpile_jsy(jsy_ast, feedback) ::
  if 'string' === typeof jsy_ast ::
    jsy_ast = scan_jsy(jsy_ast, feedback)

  const visitor = @{} __proto__: transpile_visitor

  if feedback && feedback.sourcemap ::
    Object.defineProperties @ visitor, @{}
      src_map_gen: @{} value: new feedback.sourcemap.SourceMapGenerator()

  const lines = []
  visitor.start()

  for const ln of jsy_ast ::
    //debug_ln @ ln
    visitor.start_line(ln)
    if ! ln.is_blank ::
      perform_part(ln.indent)
      for const part of ln.content ::
        perform_part(part)

    add_line @ visitor.finish_line(ln)

  visitor.finish()

  return lines.join('\n')

  function add_line(src_parts) ::
    lines.push @ src_parts.join('')
    
  function perform_part(part) ::
    const key = `v$${part.type}`
    visitor[key] @ part


function debug_ln(ln) ::
  if ln.is_blank :: return
  console.dir @: types: ln.content.map @ e => e.type

const root_head = Object.freeze @: __proto__: null

const transpile_visitor = @{}
  __proto__: null
  start() ::
    this.head = root_head

  start_line(ln) ::
    this.cur_ln = ln
    this.cur = []

  finish_line(ln) ::
    const line_src = this.cur
    this.cur = this.cur_ln = null
    return line_src

  finish() ::
    if root_head !== this.head ::
      throw new Error @ 'Excess stack at finish'

  stack_push(op, p) ::
    const {len_indent, loc} = p
    const head = @{} __proto__: this.head, op, len_indent, loc
    if op.in_kw_block ::
      head.in_kw_block = true

    head.tail = [this.head].concat(head.tail || [])
    if head.op.pre ::
      this.cur.push @ head.op.pre
    return this.head = head

  stack_pop() ::
    const head = this.head
    if head.op.post ::
      this.cur.push @ head.op.post
    return this.head = head.tail[0]


  v$jsy_kw(p) ::
    const kw_op = p.explicit ? kwex_jsy_op : kw_jsy_op
    this.stack_push @ kw_op, p

  v$jsy_op(p) ::
    const jsy_op = at_offside_map[p.op]

    if jsy_op.is_kw_close ::
      while this.head.in_kw_block ::
        this.stack_pop()

    this.stack_push @ jsy_op, p


  _dedent_multi_ops() ::
    if ! this.head.loc :: return

    const line = this.cur_ln.loc.start.line
    const t = this.head.tail
      .filter @ e => e.loc && line === e.loc.start.line
      .pop()

    if undefined === t :: return

    while t !== this.head ::
      this.stack_pop()

  v$offside_dedent(p) ::
    if ! p.ends_with_jsy_op ::
      this._dedent_multi_ops()

    while this.head.len_indent >= p.len_dedent ::
      this.stack_pop()


  v$offside_indent(p) ::
    this.cur.push @ p.indent


  v$src: direct
  v$str_single: direct
  v$str_double: direct
  v$str_multi: direct
  v$comment_eol: direct
  v$comment_multi: direct
  direct

function direct(p) ::
  this.cur.push @ p.content
