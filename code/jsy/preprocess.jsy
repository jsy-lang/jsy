const rx_all_space = /* #__PURE__ */ /^[ \t]*$/ ;

function noop() :: return
const xform_proto = /* #__PURE__ */ @{}
  __proto__: null

  update(arg) ::
    if 'function' === typeof arg ::
      this.process = arg
    else if 'boolean' === typeof arg ::
      if arg :: return this.dedent()
      this.process = noop
    else if 'object' === typeof arg ::
      Object.assign(this, arg)
      let process = this.process
      if 'function' !== typeof process  && 'object' !== typeof process ::
        return this.update(process)
    else ::
      throw new TypeError @ `Unsupported update type: ${typeof arg}`

    return this

  dedent() ::
    const len_trim = this.ln.len_indent - this.ln.len_inner
    return this.update @ src_parts => ::
      let indent = src_parts[0]
      if rx_all_space.test(indent) ::
        src_parts[0] = indent.slice(0, len_trim)
      return src_parts


export function createTransform(ln, xform_cur) ::
  let xform_obj = Object.create @ xform_proto, @{}
    next: @{} value: xform_cur
    depth: @{} value: ln.len_inner
    ln: @{} value: ln

  xform_obj.process = noop
  return xform_obj


export function applyPreprocessor(feedback) ::
  let {preprocess, preprocessor, defines} = feedback || {}
  if preprocess :: return preprocess
  if preprocessor :: return feedback.preprocessor()
  if defines :: return basicPreprocessor(defines)


export function basicPreprocessor(answerFor) ::
  if 'object' === typeof answerFor ::
    answerFor = bindAnswerFor(answerFor)
  else if 'function' !== typeof answerFor ::
    throw new TypeError @ `Expected a function or object for basicPreprocessor`


  const directives = @{}
    IF(p, arg, state) ::
      if ! arg :: throw syntaxError(p)
      return state.handled = !! answerFor(arg)

    ELIF(p, arg, state) ::
      if ! arg || 'boolean' !== typeof state.handled ::
        throw syntaxError(p)
      if state.handled :: return false
      return state.handled = !! answerFor(arg)

    ELSE(p, arg, state) ::
      if arg || 'boolean' !== typeof state.handled ::
        throw syntaxError(p)
      if state.handled :: return false
      state.handled = null
      return true

  const rx = /^#\s*([A-Z]+\b)(.*)$/

  const stack = []
  let allow = true, state = {}
  return (p, add_xform) => ::
    let m = rx.exec(p.content)
    let dispatch = m && directives[m[1]]
    if ! dispatch :: throw syntaxError(p)

    if ! allow ::
      state = null
      return false

    let ans = dispatch @ p, m[2].trim(), state
    allow = !! ans

    stack.push(state); state = {}

    add_xform @: done, process: allow

  function done(ln) ::
    state = stack.pop()
    allow = true

  function syntaxError(p) ::
    return p.loc.start.syntaxError @ `Preprocessor Invalid: "${p.content}"`


function not_stkop(args) ::
  let a=args.pop()
  return !a
function and_stkop(args) ::
  let a=args.pop(), b=args.pop()
  return a && b
function or_stkop(args) ::
  let a=args.pop(), b=args.pop()
  return a || b
export const preprocessor_stack_ops = @{}
  'false': false, 'true': true, 'FALSE': false, 'TRUE': true
  '!': Object.assign @ not_stkop, {order: 0}
  '&&': Object.assign @ and_stkop, {order: 10}
  '||': Object.assign @ or_stkop, {order: 20}
  'NOT': not_stkop
  'AND': and_stkop
  'OR': or_stkop

export function bindAnswerFor(defines, preproc_ops=preprocessor_stack_ops) ::
  return function answerFor(expr_src) ::
    let pp_expr = expr_src.split(/\s+/)
      .map @ key => defines[key] || preproc_ops[key]

    return eval_shuntingYard(pp_expr, expr_src)

export function eval_shuntingYard(expr, expr_src) ::
  // see https://en.wikipedia.org/wiki/Shunting-yard_algorithm
  let args=[], ops=[]

  for let ea of expr ::
    if 'function' === typeof ea ::
      // eval all lesser order operations
      while 0!==ops.length && (0 | ops[0].order) <= (0 | ea.order) ::
        args.push @ ops.shift() @ args

      // push this operator on the stack
      ops.unshift(ea)

    else ::
      args.push(ea)

  // evaluate all operations
  while 0 !== ops.length ::
    args.push @ ops.shift() @ args

  if 1 !== args.length ::
    throw new SyntaxError @
      `Invalid preprocessor expression: "${expr_src}"`

  return args[0]

