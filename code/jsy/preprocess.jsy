const rx_all_space = /* #__PURE__ */ /^[ \t]*$/ ;

const xform_proto = /* #__PURE__ */ @{}
  __proto__: null

  process() :: // noop

  update(arg) ::
    if 'function' === typeof arg ::
      this.process = arg
    else if 'boolean' === typeof arg ::
      if arg :: return this.dedent()
      this.process = xform_proto.process
    else if 'object' === typeof arg ::
      Object.assign(this, arg)
      let process = this.process
      if 'function' !== typeof process && 'object' !== typeof process ::
        return this.update(process)
    else ::
      throw new TypeError @ `Unsupported update type: ${typeof arg}`

    return this

  dedent() ::
    let len_trim = this.ln.len_indent - this.ln.len_inner
    return this.update @ src_parts => ::
      let indent = src_parts[0]
      if rx_all_space.test(indent) ::
        src_parts[0] = indent.slice(0, len_trim)
      return src_parts


export const create_xform = @\ ln, xform_cur => @:
  __proto__: xform_proto
  next: xform_cur
  ln, depth: ln.len_inner


export function basic_preprocessor(answerFor) ::
  if null == answerFor ::
    return p => p // defines is null -- disable preprocessor

  if 'object' === typeof answerFor ::
    answerFor = shunting_yard(answerFor)
  else if 'function' !== typeof answerFor ::
    throw new TypeError @ `Expected a function or object for basic_preprocessor`


  const directives = @{}
    IF(p, arg, state) ::
      if ! arg :: throw syntaxError(p)
      return state.handled = !! answerFor(arg)

    ELIF(p, arg, state) ::
      if ! arg || 'boolean' !== typeof state.handled ::
        throw syntaxError(p)
      if state.handled :: return false
      return state.handled = !! answerFor(arg)

    ELSE(p, arg, state) ::
      if arg || 'boolean' !== typeof state.handled ::
        throw syntaxError(p)
      if state.handled :: return false
      state.handled = null
      return true

  const rx = /^#\s*([A-Z]+\b)(.*)$/

  const stack = []
  let allow = true, state = {}
  return (p, add_xform) => ::
    let m = rx.exec(p.content)
    let dispatch = m && directives[m[1]]
    if ! dispatch :: throw syntaxError(p)

    if ! allow ::
      state = null
      return false

    let ans = dispatch @ p, m[2].trim(), state
    allow = !! ans

    stack.push(state); state = {}

    add_xform @:
      process: allow
      done(ln) ::
        state = stack.pop()
        allow = true

  function syntaxError(p) ::
    return p.loc.start.syntaxError @ `Preprocessor Invalid: "${p.content}"`


export function shunting_yard(defines) ::
  ::
    let _op_ = (order, op_fn) => (op_fn.order=order, op_fn)
    let NOT = z => ! z.pop()
    let AND = (z, a=z.pop(), b=z.pop()) => a && b
    let OR = (z, a=z.pop(), b=z.pop()) => a || b

    let ops = @{}
      __proto__: null
      false: false, FALSE: false,
      true: true, TRUE: true
      NOT, '!': _op_(0, NOT),
      AND, '&&': _op_(10, AND),
      OR, '||': _op_(20, OR),

    var lut_expr = key => ops[key] ?? defines[key]

  return function eval_shunting_yard(expr_src) ::
    // see https://en.wikipedia.org/wiki/Shunting-yard_algorithm
    let args=[], ops=[]

    let expr = expr_src.split(/\s+/).map(lut_expr)
    for let tip of expr ::
      if 'function' !== typeof tip ::
        args.push(tip)
        continue

      // eval all lesser order operations
      while ops[0] && (0 | ops[0].order) <= (0 | tip.order) ::
        args.push @ ops.shift() @ args

      // push this operator on the stack
      ops.unshift(tip)

    // evaluate all operations
    while ops[0] ::
      args.push @ ops.shift() @ args

    if 1 !== args.length ::
      throw new SyntaxError @
        `Invalid preprocessor expression: "${expr_src}"`

    return args[0]

