
const pp_sym = Symbol('#IF?')
const basic_preprocessor_proto = @{}
  bind() ::
    const rx = /^#\s*([A-Z]+\b)(.*)$/
    return @\ part, stacktop ::
      let [,directive,arg] = rx.exec(part.content) || []
      if ! this['v$'+directive] ::
        throw this.syntaxError(part)

      return this['v$'+directive] @
        part, (arg||'').trim(), stacktop

  syntaxError: part => part.loc.start.syntaxError @ `Preprocessor Invalid: "${part.content}"`

  v$IF(part, arg, stacktop) ::
    if ! arg :: throw this.syntaxError(part)
    let ans = !! this.answerFor(arg)
    return stacktop[pp_sym] = ans

  v$ELIF(part, arg, stacktop) ::
    if ! arg || 'boolean' !== typeof stacktop[pp_sym] ::
      throw this.syntaxError(part)

    if ! stacktop[pp_sym] ::
      let ans = !! this.answerFor(arg)
      return stacktop[pp_sym] = ans
    return false

  v$ELSE(part, arg, stacktop) ::
    if arg || 'boolean' !== typeof stacktop[pp_sym] ::
      throw this.syntaxError(part)

    if ! stacktop[pp_sym] ::
      stacktop[pp_sym] = null
      return true
    return false


export function basic_preprocessor(answerFor) ::
  if null == answerFor ::
    return // defines is null -- disable preprocessor

  if 'object' === typeof answerFor ::
    answerFor = shunting_yard(answerFor)
  else if 'function' !== typeof answerFor ::
    throw new TypeError @ `Expected a function or object for basic_preprocessor`

  return {__proto__: basic_preprocessor_proto, answerFor}.bind()


export function shunting_yard(defines) ::
  ::
    let _op_ = (order, op_fn) => (op_fn.order=order, op_fn)
    let NOT = v => ! v
    let AND = (a, b) => a && b
    let OR = (a, b) => a || b

    let ops = @{}
      __proto__: null
      false: false, FALSE: false,
      true: true, TRUE: true
      NOT, '!': _op_(0, NOT),
      AND, '&&': _op_(10, AND),
      OR, '||': _op_(20, OR),

    var lut_expr = key => ops[key] ?? defines[key]

  function eval_op(fn_op, args) ::
    args.push @
      fn_op.length
        ? fn_op(... args.splice(-fn_op.length))
        : fn_op()

  return function eval_shunting_yard(expr_src) ::
    // see https://en.wikipedia.org/wiki/Shunting-yard_algorithm
    let args=[], ops=[]

    let expr = expr_src.split(/\s+/).map(lut_expr)
    for let tip of expr ::
      if 'function' !== typeof tip ::
        args.push(tip)
        continue

      // eval all lesser order operations
      while ops[0] && (0 | ops[0].order) <= (0 | tip.order) ::
        eval_op(ops.shift(), args)

      // push this operator on the stack
      ops.unshift(tip)

    // evaluate all operations
    while ops[0] ::
      eval_op(ops.shift(), args)

    if 1 !== args.length ::
      throw new SyntaxError @
        `Invalid preprocessor expression: "${expr_src}"`

    return args[0]

