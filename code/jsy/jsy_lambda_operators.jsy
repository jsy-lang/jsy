

// @::   @::>   @::>*   @::*
const lambda_block_tbl = /* #__PURE__ */ @{}
  '': a => @: pre: `((${a}) => {`, post: '})'
  '>': a => @: pre: `(async (${a}) => {`, post: '})'
  '>*': a => @: pre: `((async function * (${a}) {`, post: '}).bind(this))'
  '*': a => @: pre: `((function * (${a}) {`, post: '}).bind(this))'

// @=>   @=>>
const lambda_arrow_tbl = /* #__PURE__ */ @{}
  __proto__: lambda_block_tbl
  '': a => @: pre: `((${a}) =>`, post: ')'
  '>': a => @: pre: `(async (${a}) =>`, post: ')'


// @!::   @!::>   @!::>*   @!::*
const iife_expr_tbl = /* #__PURE__ */ @{}
  '': a => @: pre: `(((${a}) => {`, post: '})())'
  '>': a => @: pre: `((async (${a}) => {`, post: '})())'
  '>*': a => @: pre: `((async function * (${a}) {`, post: '}).call(this))'
  '*': a => @: pre: `((function * (${a}) {`, post: '}).call(this))'


// @!=>   @!=>>
const iife_arrow_tbl = /* #__PURE__ */ @{}
  __proto__: iife_expr_tbl
  '': a => @: pre: `(((${a}) =>`, post: ')())'
  '>': a => @: pre: `((async (${a}) =>`, post: ')())'


const bindLambdaOpZero = table =>
  function opResolveLambdaZero(p) ::
    let [_, suffix] = p.content.match(this.jsy_op)
    let entry = table[suffix || '']
    if undefined === entry ::
      throw new SyntaxError @ `JSY lambda expression unrecognized specifier ("${suffix}")`
    return entry('')


const fmt_arg_kw = args => `{${args}}`
const fmt_arg_vec = args => `[${args}]`
const bindLambdaOpResolve = (table, as_args=(v=>v)) =>
  function opResolveLambda(p) ::
    let [_, args, suffix] = p.content.match(this.jsy_op)
    let entry = table[suffix || '']
    if undefined === entry ::
      throw new SyntaxError @ `JSY lambda with args expression unrecognized specifier ("${suffix}")`
    return entry(as_args(args) || '')



export const at_lambda_offside = /* #__PURE__ */ @[]
  // object unpack all args
  @{} jsy_op0: '@\\:=>', jsy_op: /@\\:(.*?)=>(>?\*?)/,
      pre: '(()=>', post: ')'
      opResolve: bindLambdaOpResolve @ lambda_arrow_tbl, fmt_arg_kw
  @{} jsy_op0: '@\\:::', jsy_op: /@\\:(.*?)::(>?\*?)/,
      pre: '(()=>{', post: '})',
      opResolve: bindLambdaOpResolve @ lambda_block_tbl, fmt_arg_kw

  // array unpack all args
  @{} jsy_op0: '@\\#=>', jsy_op: /@\\#(.*?)=>(>?\*?)/,
      pre: '(()=>', post: ')'
      opResolve: bindLambdaOpResolve @ lambda_arrow_tbl, fmt_arg_vec
  @{} jsy_op0: '@\\#::', jsy_op: /@\\#(.*?)::(>?\*?)/,
      pre: '(()=>{', post: '})',
      opResolve: bindLambdaOpResolve @ lambda_block_tbl, fmt_arg_vec

  // normal args
  @{} jsy_op0: '@\\=>', jsy_op: /@\\(.*?)=>(>?\*?)/,
      pre: '(()=>', post: ')'
      opResolve: bindLambdaOpResolve @ lambda_arrow_tbl
  @{} jsy_op0: '@\\::', jsy_op: /@\\(.*?)::(>?\*?)/,
      pre: '(()=>{', post: '})',
      opResolve: bindLambdaOpResolve @ lambda_block_tbl

  // zero args
  @{} jsy_op0: '@=>', jsy_op: /@=>(>?\*?)/,
      pre: '(()=>', post: ')',
      opResolve: bindLambdaOpZero @ lambda_arrow_tbl
  @{} jsy_op0: '@::', jsy_op: /@::(>?\*?)/,
      pre: '(()=>{', post: '})',
      opResolve: bindLambdaOpZero @ lambda_block_tbl


export const at_lambda_iife_offside = /* #__PURE__ */ @[]
  @{} jsy_op: '::!', pre: '{(()=>{', post: '})()}', is_kw_close: true
  @{} jsy_op: '::!>', pre: '{(async ()=>{', post: '})()}', is_kw_close: true

  @{} jsy_op0: '@!*>', jsy_op: /@!\*>/, pre: '((async function *(){', post: '}).call(this))'
  @{} jsy_op0: '@!*[]', jsy_op: /@!\*\[\]/, pre: '[... (function *(){', post: '}).call(this)]'
  @{} jsy_op0: '@!*#', jsy_op: /@!\*#/, pre: '([... (function *(){', post: '}).call(this)])'
  @{} jsy_op0: '@!*', jsy_op: /@!\*/, pre: '((function *(){', post: '}).call(this))'

  @{} jsy_op0: '@!=>', jsy_op: /@!=>(>?\*?)/,
      pre: '((()=>', post: ')())',
      opResolve: bindLambdaOpZero @ iife_arrow_tbl

  @{} jsy_op0: '@!::', jsy_op: /@!::(>?\*?)/,
      pre: '((()=>{', post: '})())',
      opResolve: bindLambdaOpZero @ iife_expr_tbl

  @{} jsy_op0: '@!', jsy_op: /@!(>?\*?)(?!=>)/,
      pre: '((()=>{', post: '})())',
      opResolve: bindLambdaOpZero @ iife_expr_tbl


export const at_lambda_offside_all = /* #__PURE__ */ [].concat @
  at_lambda_offside
  at_lambda_iife_offside


