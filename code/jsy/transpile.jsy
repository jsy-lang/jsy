import { scan_jsy } from './scan.jsy'
import { basic_preprocessor } from './preprocess.jsy'
import { transpile_visitor } from './visitor.jsy'
import { sourcemap_comment } from './utils.jsy'


export function jsy_transpile(jsy_ast, feedback) ::
  let lines = [... jsy_iter_transpile(jsy_ast, feedback)]
  return lines.join('').trimEnd()

export function * jsy_iter_transpile(jsy_ast, feedback) ::
  if ! feedback :: feedback = {}

  if 'string' === typeof jsy_ast ::
    jsy_ast = scan_jsy(jsy_ast, feedback)

  let visitor = @{}
    __proto__: transpile_visitor
    ... feedback.visitor

  ::
    if feedback.checkOptionalComma ::
      visitor.checkOptionalComma = feedback.checkOptionalComma

    if feedback.addSourceMapping ::
      visitor.addSourceMapping = feedback.addSourceMapping

    visitor.preprocess = feedback.preprocessor?.()
      ?? basic_preprocessor(feedback.defines)


  yield * visitor.ast_iter(jsy_ast)

  let srcmap = feedback.inlineSourceMap?.()
  if srcmap ::
    yield sourcemap_comment(srcmap, '\n')
    

export { version } from './version.js'
export @{}
  jsy_transpile as default

