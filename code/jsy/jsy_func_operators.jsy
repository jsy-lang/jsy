
// Like lambdas without closing over `this`
// @~::   @~::>   @~::>*   @~::*
const func_block_tbl = /* #__PURE__ */ @{}
  '': a => @: pre: `(function (${a}) {`, post: '})'
  '>': a => @: pre: `(async function(${a}) {`, post: '})'
  '>*': a => @: pre: `(async function * (${a}) {`, post: '})'
  '*': a => @: pre: `(function * (${a}) {`, post: '})'


export const at_func_offside = /* #__PURE__ */ @[]
  @{} jsy_op0: '@~::', jsy_op: /@~(.*?)::(>?\*?)/,
      pre: '(function () {', post: '})',
      opResolve(p) ::
        let [_, args, suffix] = p.content.match(this.jsy_op)
        let entry = func_block_tbl[suffix]
        if undefined === entry ::
          throw new SyntaxError @ `JSY function expression unrecognized specifier ("${suffix}")`
        return entry(args || '')

