const rx_punct = /* #__PURE__ */ /[,.;:?]/
const rx_binary_ops = /* #__PURE__ */ /\&\&|\|\||\?\?/
const rx_add_sub_ops = /* #__PURE__ */ /(?<![+-])[+-]/ // but exclude increment and decrement ops

const rx_disrupt_comma_tail = /* #__PURE__ */
  _regexp_join('', [ rx_punct, /=>/, rx_add_sub_ops, rx_binary_ops ], '\\s*$')

const rx_disrupt_comma_head = /* #__PURE__ */
  _regexp_join('^\\s*', [ rx_punct, rx_binary_ops ], '')

const rx_rescue_comma_head = /* #__PURE__ */
  _regexp_join('^\\s*', [ /\.\.\./ ], '')

const rx_last_bits = /* #__PURE__ */ /[()\[\]{}]|<\/?\w*>/ ;
const rx_dict_as_name = /* #__PURE__ */ /\s+as\s+\w+/g

export function checkOptionalComma(op, pre_body, post_body) ::
  let pre_end = pre_body.split(rx_last_bits).pop()
  if rx_disrupt_comma_tail.test(pre_end) ::
    return false

  let post_start = post_body.split(rx_last_bits).shift()
  if rx_disrupt_comma_head.test(post_start) ::
    if ! rx_rescue_comma_head.test(post_start) ::
      return false

  if op.pre.includes('{') ::
    // support for blocks like:
    //   import {name as othername} from 'file' blocks
    //   export {name as othername}
    pre_body = pre_body.replace(rx_dict_as_name, '')
    post_body = post_body.replace(rx_dict_as_name, '')

  if checkSyntax @ `${op.pre} ${pre_body} , post_body ${op.post}` ::
    return true

  if checkSyntax @ `${op.pre} pre_body , ${post_body} ${op.post}` ::
    return true

  return false


const fn_flavors = /* #__PURE__ */ @[]
  (function(){}).constructor
  (function *(){}).constructor
  (async function(){}).constructor
  (async function *(){}).constructor

function checkSyntax(expr) ::
  for let FuncKind of fn_flavors ::
    try ::
      new FuncKind @ `return ${expr}`
      return true
    catch err ::

  return false


function _regexp_join(pre, rx_options, post) ::
  rx_options = [... rx_options]
    .flatMap @ rx => rx ? [rx.source] : []
  return new RegExp(`${pre}(?:${rx_options.join('|')})${post}`)

