import { at_lambda_offside, at_lambda_iife_offside } from './jsy_lambda_operators.jsy'
import { at_func_offside } from './jsy_func_operators.jsy'
import { apply_prefix_operators, jsy_prefix_operators } from './jsy_prefix_operators.jsy'

// Order matters here -- list more specific matchers higher (first) in the order
export const at_outer_offside = /* #__PURE__ */ @[]
  @{} jsy_op: '::()', pre: '(', post: ')', nestBreak: true
  @{} jsy_op: '::{}', pre: '{', post: '}', nestBreak: true
  @{} jsy_op: '::[]', pre: '[', post: ']', nestBreak: true
  @{} jsy_op: '::', pre: ' {', post: '}', nestBreak: true, is_kw_close: true

export const at_inner_offside_basic = /* #__PURE__ */ @[]
  @{} jsy_op: '@:', pre: '({', post: '})', implicitSep: ',', isFoldable: true
  @{} jsy_op: '@#', pre: '([', post: '])', implicitSep: ',', isFoldable: true
  @{} jsy_op: '@()', pre: '(', post: ')', implicitSep: ',', isFoldable: true
  @{} jsy_op: '@{}', pre: '{', post: '}', implicitSep: ',', isFoldable: true
  @{} jsy_op: '@[]', pre: '[', post: ']', implicitSep: ',', isFoldable: true
  @{} jsy_op: '@', pre: '(', post: ')', implicitSep: ',', isFoldable: true


export const at_inner_offside_core = /* #__PURE__ */ [].concat @
  at_func_offside
  at_lambda_offside
  at_lambda_iife_offside
  at_inner_offside_basic


export const at_experimental = /* #__PURE__ */ @[]
  /* experimental ideas; may be removed at any time */


export const at_unknown_ops = /* #__PURE__ */ @[]
  @{} jsy_op0: '?@', jsy_op: /\?@[^\w\s]+/,
  @{} jsy_op0: ';@', jsy_op: /;@[^\w\s]+/,
  @{} jsy_op0: ',@', jsy_op: /,@[^\w\s]+/,
  @{} jsy_op0: '::', jsy_op: /::[^\w\s]+/,
  @{} jsy_op0: '@', jsy_op: /@[^\w\s]+/,


export const at_inner_offside = /* #__PURE__ */
  apply_prefix_operators @
    at_inner_offside_core.flat()
    jsy_prefix_operators


export const op_template_str = @{} nestBreak: true

export const at_offside = /* #__PURE__ */ [].concat @
  at_outer_offside
  at_inner_offside
  at_experimental


export const at_offside_map = /* #__PURE__ */ at_offside.reduce @
  (m, ea) => ::
    if ea.jsy_op0 ::
      m[ea.jsy_op0] = ea

    if 'string' === typeof ea.jsy_op ::
      m[ea.jsy_op] = ea
    return m
  {}


function kwExpandOp(p) ::
  return @{} __proto__: this, pre: p.kw + this.pre

export const extra_jsy_ops = /* #__PURE__ */ @{}
  kw_normal: @{} jsy_op: 'kw', pre: ' (', post: ')', kwExpandOp, in_nested_block: true
  kw_explicit: @{} jsy_op: 'kw', pre: '', post: '', kwExpandOp, in_nested_block: true
  tmpl_param: @{} jsy_op: 'tmpl_param', pre: '', post: '', in_nested_block: true
  jsx_param: @{} jsy_op: 'jsx_param', pre: '', post: '', in_nested_block: true

export const keywords_with_args = /* #__PURE__ */ @[] 'if', 'while', 'for await', 'for', 'switch'
export const keywords_zero_args = /* #__PURE__ */ @[] 'catch'

export const keywords_locator_parts = /* #__PURE__ */ [].concat @
  keywords_with_args.map @ e => `else ${e}`
  keywords_with_args
  keywords_zero_args
