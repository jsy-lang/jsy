import { rx_offside_ops, rx_keyword_ops, rx_unknown_ops } from './regexp.jsy'
import { inject_dedent } from '../scanner/inject_dedent.jsy'
import { scan_javascript_with_jsx } from '../scanner/scan_jsx_javascript.jsy'

export * from '../scanner/ast_debug.jsy'

const _is_offside_dedent = part => 'offside_dedent' === part.type
export function jsy_scan(source, feedback) ::
  const jsy_ast = scan_javascript_with_jsx(source, feedback)

  inject_dedent @ jsy_ast, @[] 'comment_eol'

  for let ln of jsy_ast ::
    if ln.is_blank :: continue

    let ln_parts = ln.content = transform_jsy_ops(ln.content, ln)

    let idx_tail = ln_parts.findIndex @ _is_offside_dedent
    let dedent = ln_parts[idx_tail--]

    while idx_tail >= 0 ::
      let tail = ln_parts[idx_tail--]
      if undefined === tail ::
        continue

      if /^jsy_op/.test(tail.type) ::
        dedent.ends_with_jsy_op = true
        tail.ending_jsy_op = true
      else if 'src' !== tail.type || tail.content.trim() ::
        break

  return jsy_ast



function transform_jsy_ops(ln_parts, ln) ::
  const res = []

  for let p, i=0; undefined !== (p = ln_parts[i]) ; i++ ::
    if 'src' === p.type ::
      transform_jsy_part(res, p, ln)
    else res.push(p)


  // allow keywords at the start and in code blocks after "::"
  let kw_allowed = 'src' === res[0].type
  for let idx=0 ; undefined !== res[idx] ; idx ++ ::
    if kw_allowed ::
      transform_jsy_keyword(res, idx, ln)
      kw_allowed = false

    else if 'jsy_op' === res[idx].type ::
      kw_allowed = '::' === res[idx].op

  return res



function transform_jsy_keyword(res, idx, ln) ::
  const first = res[idx]

  rx_keyword_ops.lastIndex = 0
  const kw_match = rx_keyword_ops.exec(first.content)
  if ! kw_match :: return false

  const rest = kw_match.input.slice @ rx_keyword_ops.lastIndex
  if '(' === rest[0] ::
    return res // explicit keyword arguments

  const kw_start = first.loc.start
  const kw_end = kw_start.move @ kw_match[0]
  const kw = kw_match[0].split(' ').filter(Boolean).join(' ')

  const after = rest ? null : res[1+idx]
  const explicit = after && 'jsy_op' === after.type && '@' === after.op

  const kw_node = @{}
    type: 'jsy_kw', kw, 
    loc: @{} start: kw_start, end: kw_end
    len_indent: ln.len_indent
    explicit

  const post_node = as_src_ast @ rest, kw_end, first.loc.end

  res.splice @ idx, 1, kw_node, post_node
  return true


function transform_jsy_part(res, part, ln) ::
  ::
    rx_offside_ops.lastIndex = 0

    let loc_tip = part.loc.start
    while true ::
      let start = loc_tip, idx0 = rx_offside_ops.lastIndex
      const op_match = rx_offside_ops.exec(part.content)

      if ! op_match ::
        _tail(loc_tip, idx0)
        return res

      if idx0 < op_match.index ::
        start = loc_tip = _inner(loc_tip, idx0, op_match.index)
        idx0 = rx_offside_ops.lastIndex


      const op = op_match[0].trim()
      const end = loc_tip = loc_tip.move(op_match[0])

      const op_part = @{}
        type: 'jsy_op', op
        loc: @{} start, end
        len_indent: ln.len_indent
        content: op_match[0]

      const op_args = op_match.slice(1).filter(Boolean)
      if op_args.length ::
        op_part.type = 'jsy_op_args'
        op_part.op_args = op_args
        op_part.op = op_args.reduce @
          (op, p) => op.replace(p, ''), op

      res.push @ op_part

  function _unknown_ops(content, loc_tip, idx0) ::
    rx_unknown_ops.lastIndex = idx0
    const op_unknown = rx_unknown_ops.exec(content)
    if op_unknown ::
      const op = op_unknown[0].trim()
      const start = loc_tip
      const end = loc_tip = loc_tip.move(op_unknown[0])
      res.push @:
        type: 'jsy_unknown', op
        loc: @{} start, end
        len_indent: ln.len_indent
        content: op_unknown[0]

  function _inner(loc_tip, idx0, idx_content) ::
    const pre = part.content.slice(idx0, idx_content)
    _unknown_ops(pre, loc_tip, idx0)

    const start = loc_tip
    const end = loc_tip.move(pre)
    res.push @ as_src_ast @ pre, start, end
    return end

  function _tail(loc_tip, idx0) ::
    const rest = part.content.slice(idx0)
    if rest ::
      _unknown_ops(rest, loc_tip, idx0)

      const start = loc_tip
      const end = start.move(rest)
      res.push @ as_src_ast @ rest, start, end

function as_src_ast(content, start, end) ::
  return @{} type: 'src', loc: {start, end}, content


export { jsy_scan as scan_jsy, jsy_scan as default }
