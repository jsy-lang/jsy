export const at_lambda_offside = @[]
  @{} jsy_op0: '@=>', jsy_op: /@=>([*>]*)/,
      pre: '(()=>', post: ')',
      opResolve(p) ::
        const [_, suffix] = p.content.match(this.jsy_op)
        return tableOpResolve @ lambda_arrow_tbl, '', '', suffix

  @{} jsy_op0: '@!=>', jsy_op: /@!=>([*>]*)/,
      pre: '(()=>', post: ')()',
      opResolve(p) ::
        const [_, suffix] = p.content.match(this.jsy_op)
        const ans = tableOpResolve @ iife_arrow_tbl, '', '', suffix
        return tableOpResolve @ iife_arrow_tbl, '', '', suffix

  @{} jsy_op0: '@\\=>', jsy_op: /@\\([*>]*)(.*?)=>([*>]*)/,
      pre: '(()=>', post: ')', implicitCommas: true,
      opResolve(p) ::
        const [_, prefix, args, suffix] = p.content.match(this.jsy_op)
        return tableOpResolve @ lambda_arrow_tbl, args, prefix, suffix

  @{} jsy_op0: '@\\::', jsy_op: /@\\([*>]*)(.*?)::/,
      pre: '(()=>{', post: '})',
      opResolve(p) ::
        const [_, prefix, args] = p.content.match(this.jsy_op)
        return tableOpResolve @ lambda_block_tbl, args, prefix, ''

  @{} jsy_op0: '@!', jsy_op: /@!([*>]*)/,
      pre: '(()=>{', post: '})()',
      opResolve(p) ::
        const [_, suffix] = p.content.match(this.jsy_op)
        return tableOpResolve @ iife_expr_tbl, '', '', suffix

  @{} jsy_op: '::!', pre: ';(()=>{', post: '})();',
  @{} jsy_op: '::!>', pre: ';(async ()=>{', post: '})();',

export default at_lambda_offside



const lambda_block_tbl = @{}
  '': a => @: pre: `((${a}) => {`, post: '})'
  '>': a => @: pre: `(async (${a}) => {`, post: '})'
  '>*': a => @: pre: `(async function * (${a}) {`, post: '}).bind(this)'
  '*>': a => @: pre: `(async function * (${a}) {`, post: '}).bind(this)'
  '*': a => @: pre: `(function * (${a}) {`, post: '}).bind(this)'

const lambda_arrow_tbl = @{}
  __proto__: lambda_block_tbl
  '': a => @: pre: `((${a}) =>`, post: ')', implicitCommas: true
  '>': a => @: pre: `(async (${a}) =>`, post: ')', implicitCommas: true


const iife_expr_tbl = @{}
  '': a => @: pre: `((${a}) => {`, post: '})()'
  '>': a => @: pre: `(async (${a}) => {`, post: '})()'
  '>*': a => @: pre: `(async function * (${a}) {`, post: '}).call(this)'
  '*>': a => @: pre: `(async function * (${a}) {`, post: '}).call(this)'
  '*': a => @: pre: `(function * (${a}) {`, post: '}).call(this)'

const iife_arrow_tbl = @{}
  __proto__: lambda_block_tbl
  '': a => @: pre: `((${a}) =>`, post: ')()', implicitCommas: true
  '>': a => @: pre: `(async (${a}) =>`, post: ')()', implicitCommas: true


function tableOpResolve(table, args, prefix, suffix) ::
  if prefix && suffix ::
    throw new SyntaxError @ `JSY lambda expression overspecified ("${prefix}" and "${suffix}")`

  const entry = table[ prefix || suffix || '' ]
  if undefined === entry ::
    throw new SyntaxError @ `JSY lambda expression unrecognized specifier ("${prefix || suffix}")`

  return entry(args)


