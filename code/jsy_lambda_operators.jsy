

// @::   @::>   @::>*   @::*
const lambda_block_tbl = /* #__PURE__ */ @{}
  '': a => @: pre: `((${a}) => {`, post: '})'
  '>': a => @: pre: `(async (${a}) => {`, post: '})'
  '>*': a => @: pre: `((async function * (${a}) {`, post: '}).bind(this))'
  '*': a => @: pre: `((function * (${a}) {`, post: '}).bind(this))'

// @=>   @=>>
const lambda_arrow_tbl = /* #__PURE__ */ @{}
  __proto__: lambda_block_tbl
  '': a => @: pre: `((${a}) =>`, post: ')'
  '>': a => @: pre: `(async (${a}) =>`, post: ')'


// @!::   @!::>   @!::>*   @!::*
const iife_expr_tbl = /* #__PURE__ */ @{}
  '': a => @: pre: `(((${a}) => {`, post: '})())'
  '>': a => @: pre: `((async (${a}) => {`, post: '})())'
  '>*': a => @: pre: `((async function * (${a}) {`, post: '}).call(this))'
  '*': a => @: pre: `((function * (${a}) {`, post: '}).call(this))'


// @!=>   @!=>>
const iife_arrow_tbl = /* #__PURE__ */ @{}
  __proto__: iife_expr_tbl
  '': a => @: pre: `(((${a}) =>`, post: ')())'
  '>': a => @: pre: `((async (${a}) =>`, post: ')())'


const bindLambdaOpResolve = (table, withArgs) =>
  function opResolve(p) ::
    let [_, m1, m2] = p.content.match(this.jsy_op)
    let args = withArgs ? m1 || '' : ''
    let suffix = (withArgs ? m2 : m1) || ''

    let entry = table[suffix]
    if undefined === entry ::
      throw new SyntaxError @ `JSY lambda expression unrecognized specifier ("${suffix}")`

    return entry(args)



export const at_lambda_offside = /* #__PURE__ */ @[]
  @{} jsy_op0: '@=>', jsy_op: /@=>(>?\*?)/,
      pre: '(()=>', post: ')',
      opResolve: bindLambdaOpResolve @ lambda_arrow_tbl

  @{} jsy_op0: '@\\=>', jsy_op: /@\\(.*?)=>(>?\*?)/,
      pre: '(()=>', post: ')'
      opResolve: bindLambdaOpResolve @ lambda_arrow_tbl, true

  @{} jsy_op0: '@::', jsy_op: /@::(>?\*?)/,
      pre: '(()=>{', post: '})',
      opResolve: bindLambdaOpResolve @ lambda_block_tbl

  @{} jsy_op0: '@\\::', jsy_op: /@\\(.*?)::(>?\*?)/,
      pre: '(()=>{', post: '})',
      opResolve: bindLambdaOpResolve @ lambda_block_tbl, true


export const at_lambda_iife_offside = /* #__PURE__ */ @[]
  @{} jsy_op: '::!', pre: '{(()=>{', post: '})()}', is_kw_close: true
  @{} jsy_op: '::!>', pre: '{(async ()=>{', post: '})()}', is_kw_close: true

  @{} jsy_op0: '@!*>', jsy_op: /@!\*>/, pre: '((async function *(){', post: '}).call(this))'
  @{} jsy_op0: '@!*[]', jsy_op: /@!\*\[\]/, pre: '[... (function *(){', post: '}).call(this)]'
  @{} jsy_op0: '@!*#', jsy_op: /@!\*#/, pre: '([... (function *(){', post: '}).call(this)])'
  @{} jsy_op0: '@!*', jsy_op: /@!\*/, pre: '((function *(){', post: '}).call(this))'


  @{} jsy_op0: '@!\\::', jsy_op: /@!\\(.*?)::(>?\*?)/,
      pre: '((()=>', post: ')())',
      opResolve: bindLambdaOpResolve @ iife_expr_tbl, true

  @{} jsy_op0: '@!\\=>', jsy_op: /@!\\(.*?)=>(>?\*?)/,
      pre: '((()=>', post: ')())',
      opResolve: bindLambdaOpResolve @ iife_arrow_tbl, true

  @{} jsy_op0: '@!=>', jsy_op: /@!=>(>?\*?)/,
      pre: '((()=>', post: ')())',
      opResolve: bindLambdaOpResolve @ iife_arrow_tbl

  @{} jsy_op0: '@!', jsy_op: /@!(>?\*?)(?!=>)/,
      pre: '((()=>{', post: '})())',
      opResolve: bindLambdaOpResolve @ iife_expr_tbl


export const at_lambda_offside_all = /* #__PURE__ */ [].concat @
  at_lambda_offside
  at_lambda_iife_offside


