const rx_punct = /[,.;:?]/
const rx_binary_ops = /\&\&|\|\|/

const rx_disrupt_comma_tail = @!
  const opts = @[] rx_punct, /=>/, /[+-]/, rx_binary_ops
  return new RegExp @ join_rx(opts) + '\\s*$'

const rx_disrupt_comma_head = @!
  const opts = @[] rx_punct, rx_binary_ops
  return new RegExp @ '^\\s*' + join_rx(opts)

const rx_rescue_comma_head = @!
  const opts = @[] /\.\.\./
  return new RegExp @ '^\\s*' + join_rx(opts)

const rx_last_bits = /[()\[\]{}]|<\/?\w*>/ ;

export default checkOptionalComma
export function checkOptionalComma(op, pre_body, post_body) ::
  const pre_end = pre_body.split(rx_last_bits).pop()
  if rx_disrupt_comma_tail.test(pre_end) ::
    return false

  const post_start = post_body.split(rx_last_bits).shift()
  if rx_disrupt_comma_head.test(post_start) ::
    if ! rx_rescue_comma_head.test(post_start) ::
      return false

  if checkSyntax @ `${op.pre} ${pre_body} , post_body ${op.post}` ::
    return true

  if checkSyntax @ `${op.pre} pre_body , ${post_body} ${op.post}` ::
    return true

  return false


const checkSyntax = @!
  const fn_flavors =
    @[] 'function', 'function*', 'async function', 'async function*'
    .map @ flavor => ::
      try :: return Function(`return (${flavor}(){}).constructor`)()
      catch err :: return null
    .filter @ e => e

  return function checkSyntax(expr) ::
    for const FuncKind of fn_flavors ::
      try ::
        new FuncKind @ `return ${expr}`
        return true
      catch err ::

    return false


function join_rx(rx_options, capture) ::
  const opts = Array.from(rx_options)
    .map @ rx => rx && rx.source
    .filter(Boolean).join('|')

  return (capture ? '(' : '(?:') + opts + ')'

